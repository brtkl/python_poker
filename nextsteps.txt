##############################
GENERAL status
##############################
-upper cap when betting					done		
-all in implementation					done
-split check to call and check				done
-creation of Game class					done
-button rotating					done
-speed up? 20 secs per round/player is too much		leave for now
-create some tests  for 2 players			done
-handle the issues below				done
-implement strategies from sas?				done
-refactor Strategy?					done
-add test case fr game, round 10 from the html		done
-add tests for makebet method in Player			done
-multiple all-ins - side pots				done
-not enough for bblind/sblind				done	
-raise by minus to correct (see tmp)			done
-multiple pots but should be 1, perhaps related		done (ok)
-in Game, define players with dictionaries for 		done
 starting balance and human/player mode			

-implementation for up to 8 players			done
  -To create simul prob mode for x players		done

-convert the project into a package			done
  -to update test subf in a package fassion		done
  -to replace all errors by raising custom except ?  	done
-Frontend implementation -ask Kacper?			
-multiplayer online???? - ask Kacper?			
-interactive mode					done
  -create global quit?					done
  -player attrib - human vs comp?			done
  -add small visual of a table + current bets		done
-Strategy() improvements				
  -create some strats using bet method			done
  -use prob of draw in strats as well?			
-create Simulation class??				wip
  -create print method within Game class to suppress	done
   printing for simulations and tests
  -adding stats/summary from games/rounds		wip
  -Machine Learning implementation for strats?		
  -create plots to see how probability changes for >3p?	


##############################
TESTS status
##############################
calc_probwin		done
eval_hand		done
Deck			done
Player			done
Round			done, except betting() method - since strictly related to Strategy and somewhat tested in Game, and except showstatus
Strategy		leave for now
Game			done





##############################
ISSUES
##############################
see tmp folder


exceptions:
def results(status, data):
    valid = {0, 1, 99}
    if status not in valid:
        raise ValueError("results: status must be one of %r." % valid)

Always try to raise the most appropriate exception you can - ValueError tells the caller of the function what's going on better than Exception does, for example.



##############################
IDEAS - NOTES
##############################

#func = globals()["F" + temp]


/*interactive approach for tests:*/
# import os,sys,inspect
# currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
# parentdir = os.path.dirname(currentdir)
# sys.path.insert(0,parentdir) 

/*command line approach - running all tests*/
$ cd new_project
$ python -m unittest tests.test_antigravity           - to run single test program
$ python -m unittest				      - to run all test programs





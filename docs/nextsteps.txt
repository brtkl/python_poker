##############################
GENERAL status
##############################
-upper cap when betting					done		
-all in implementation					done
-split check to call and check				done
-creation of Game class					done
-button rotating					done
-speed up? 20 secs per round/player is too much		done (eval_hand updated 25Jun2021)
-create some tests  for 2 players			done
-handle the issues below				done
-implement strategies from sas?				done
-refactor Strategy?					done
-add test case fr game, round 10 from the html		done
-add tests for makebet method in Player			done
-multiple all-ins - side pots				done
-not enough for bblind/sblind				done	
-raise by minus to correct (see tmp)			done
-multiple pots but should be 1, perhaps related		done (ok)
-in Game, define players with dictionaries for 		done
 starting balance and human/player mode			

-implementation for up to 8 players			done
  -To create simul prob mode for x players		done

-convert the project into a package			done
  -to update test subf in a package fassion		done
  -to replace all errors by raising custom except ?  	done
  -update testd for assertRaises with context manager	done

-Frontend implementation -ask Kacper?			notstarted
  -to convert to exe - PyInstaller ?			notstarted
   https://www.youtube.com/watch?v=QWqxRchawZY
   &ab_channel=Codemy.com
-multiplayer online???? - ask Kacper?			notstarted
   https://www.youtube.com/watch?v=McoDjOCb2Zo
   &ab_channel=freeCodeCamp.org

-interactive mode					done
  -create global quit?					done
  -player attrib - human vs comp?			done
  -add small visual of a table + current bets		done
  -modify iteractive mode in Game, so that player can 	notstarted - do only in frontend
   be specified (if already exists then load instead)

-Strategy() improvements				WIP3
  -create some strats using bet method			done
  -create logger (dataframe?) to be stored in sqlite	done
   after each simulation/game?
  -to identify what info/structure is needed in df_log	notstarted
  -to implement logger into sqlite (Game/Simulation)	done
  -to add getter from sql to dataframe			done
  -sim_multi not used in simulations?? check with cons	done
   it wasn't used since we need __main__ at top lvl	
  -multi not always faster than std, to create benchm	done
  -to update Round according to benchmark		done
  -make table position of players random, not only	done
   starting button
  -to restrict number of raises to 4?			notstarted
   maybe just for bot development
  -after restriction easier to transpose logs, i.e. 1	notstarted 
   rec/player/round?
  -develop some tools for data manipulation/analysis	notstarted
  -read Raschka book					WIP2
  -Machine Learning implementation for strats?		notstarted
  -to get inspiration from Alberta group papers		WIP4
  -to implement opponent modelling			notstarted
  

model: bet(bb)=probability+stage+pot(bb)+balance(bb)
   +r_players_active+maxbalance_amongplayers(bb)

-create Simulation class??				done	
  -create print method within Game class to suppress	done
   printing for simulations and tests
  -bb/100						done
  -to validate bb/100					done
  -random button_idx in Simulation			done	
  -pickle - saving players (manageobs module)		done
  -multithreading to speed up training ???		done
   e.g. instead of 100 games in 1 loop 12 games in each
   thread running in parallel? since objects are 
   recreated shouldn't be a problem when loading. 
   When saving apply sort of a queue when saving to DB?
  -calc_probwin_multi create tests 			done
  -calc_probwin_multi tests fail.. main problem		done
   ans: added param and __name__ condition in calc_
  -ensure seed() is always different			done
   ans: variance check added
  -how are the exceptions raised in multiprocessing?	done
  -calc_probwin_multi to update in Round		done
  -ogarnac dependencies.. to somehow replace sys.path?	notstarted - low priority

-loading players for simulation - Training class?	done
  -think how to speed up simulations/trainings		done (eval_hand updated 25Jun2021)
  -further improvements to prob calc speed?		done
   i.e. lookup table for table=[]
  -add new tests for type='lookup'. compare with simul? done
  -storing obj info in SQLite				done
    -_util_sqlalch_setup created - data\pokerdb		done
    -probabilities migrated to Probs table		done
    -_util_managedb created for db queries              done
    -modify calc_probwin to use load_lkp2		done
    -UserStat table create				done
    -to migrate players to UserStat table		done
    -to modify Training class to interact with db	done
    -resolve relative path problem 			done
    
    


##############################
TESTS status
##############################
calc_probwin		done
eval_hand		done
Deck			done
Player			done
Round			done, except betting() method - since strictly related to Strategy and somewhat tested in Game, and except showstatus
Strategy		leave for now
Game			done





##############################
ISSUES
##############################
see tmp folder


exceptions:
def results(status, data):
    valid = {0, 1, 99}
    if status not in valid:
        raise ValueError("results: status must be one of %r." % valid)

Always try to raise the most appropriate exception you can - ValueError tells the caller of the function what's going on better than Exception does, for example.


2021-03-21
PicklingError: Can't pickle <class 'Strategy.Strategy'>: it's not the same object as Strategy.Strategy

##############################
IDEAS - NOTES
##############################

#func = globals()["F" + temp]


/*interactive approach for tests:*/
# import os,sys,inspect
# currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
# parentdir = os.path.dirname(currentdir)
# sys.path.insert(0,parentdir) 

/*command line approach - running all tests*/
$ cd new_project
$ python -m unittest tests.test_antigravity           - to run single test program
$ python -m unittest				      - to run all test programs


Storing objects:
a) pickle with shelves
b) dill with shelves?
c) json
d) sqlite??



with open('company_data.pkl', 'wb') as output:
    company1 = Company('banana', 40)
    pickle.dump(company1, output, pickle.HIGHEST_PROTOCOL)

with open('company_data.pkl', 'rb') as input:
    company1 = pickle.load(input)
    print(company1.name)  # -> banana
    print(company1.value)  # -> 40
